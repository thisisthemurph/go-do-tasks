basePath: /api
consumes:
- application/json
definitions:
  Account:
    properties:
      email:
        type: string
        x-go-name: Email
      id:
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: godo/internal/repository/entities
  Project:
    properties:
      creator:
        $ref: '#/definitions/User'
      creator_id:
        format: uint64
        type: integer
        x-go-name: CreatorId
      description:
        type: string
        x-go-name: Description
      id:
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
      status:
        type: string
        x-go-name: StatusValue
      stories:
        items:
          $ref: '#/definitions/Story'
        type: array
        x-go-name: Stories
      tags:
        items:
          $ref: '#/definitions/Tag'
        type: array
        x-go-name: Tags
    type: object
    x-go-package: godo/internal/repository/entities
  ProjectInfo:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      id:
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
      status:
        type: string
        x-go-name: StatusValue
      story_count:
        format: uint16
        type: integer
        x-go-name: StoryCount
      tag_count:
        format: uint16
        type: integer
        x-go-name: TagCount
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: godo/internal/repository/entities
  ProjectInfoList:
    items:
      $ref: '#/definitions/ProjectInfo'
    type: array
    x-go-package: godo/internal/repository/entities
  ProjectStatus:
    format: uint8
    type: integer
    x-go-package: godo/internal/repository/enums
  Story:
    properties:
      creator:
        $ref: '#/definitions/User'
      creator_id:
        format: uint64
        type: integer
        x-go-name: CreatorId
      description:
        type: string
        x-go-name: Description
      id:
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
      project_id:
        type: string
        x-go-name: ProjectId
      status:
        type: string
        x-go-name: StatusValue
      tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
        x-go-name: Tasks
    type: object
    x-go-package: godo/internal/repository/entities
  Tag:
    description: |-
      Tag - A Project has any number of tags associated with it
      A subset of these tgs can be assigned to any of the tasks
      that form part of the Project
    properties:
      id:
        format: uint64
        type: integer
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: godo/internal/repository/entities
  Task:
    properties:
      creator:
        $ref: '#/definitions/User'
      description:
        type: string
        x-go-name: Description
      id:
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
      status:
        type: string
        x-go-name: StatusValue
      story_id:
        type: string
        x-go-name: StoryId
      tags:
        items:
          $ref: '#/definitions/Tag'
        type: array
        x-go-name: Tags
      type:
        type: string
        x-go-name: TypeValue
    type: object
    x-go-package: godo/internal/repository/entities
  User:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      discriminator:
        format: uint32
        type: integer
        x-go-name: Discriminator
      email:
        type: string
        x-go-name: Email
      id:
        format: uint64
        type: integer
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
      username:
        type: string
        x-go-name: Username
    type: object
    x-go-package: godo/internal/repository/entities
  httpError:
    properties:
      errorMessage:
        type: string
        x-go-name: ErrorMessage
      statusCode:
        format: int64
        type: integer
        x-go-name: StatusCode
    type: object
    x-go-package: godo/internal/api/httperror
  newTagDto:
    description: NewTagDto model for creating a new tag
    properties:
      name:
        description: the name associated with the tag
        maxLength: 16
        minLength: 1
        type: string
        x-go-name: Name
    required:
    - name
    type: object
    x-go-name: NewTagDto
    x-go-package: godo/internal/api/dto
host: localhost
info:
  contact:
    email: michael.w.murphy@outlook.com
    name: Mike Murphy
    url: https://github.com/thisisthemurph
  description: the purpose of this API is to facilitate data flow for the Godo application
  termsOfService: there are no TOS at this moment, use at your own risk we take no
    responsibility
  title: Godo API.
  version: 0.0.1
paths:
  /account:
    post:
      description: Creates an account and associated user
      operationId: createAccount
      responses:
        "200":
          $ref: '#/responses/accountResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Accounts
  /auth/login:
    post:
      description: Logs in a user returning a JWT for authentication
      operationId: login
      responses:
        "200":
          $ref: '#/responses/accountResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Auth
  /auth/register:
    post:
      description: Registers a user in the system
      operationId: register
      responses:
        "200":
          $ref: '#/responses/accountResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Auth
  /project:
    delete:
      description: Deletes the given project resource
      operationId: deleteProject
      parameters:
      - description: The ID of the specified Project
        example: f9d633f8-c684-4dc3-b410-d36df912c4c1
        in: path
        name: id
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        required: true
        type: string
        x-go-name: ID
      responses:
        "204":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Projects
    get:
      description: Returns a list of projects associated with the authenticated account
      operationId: listProjectInfo
      responses:
        "200":
          $ref: '#/responses/projectInfoResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Projects
    post:
      description: Creates the given project resource
      operationId: createProject
      parameters:
      - description: The new project resource to be created
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/newTagDto'
      responses:
        "201":
          $ref: '#/responses/projectResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Projects
  /project/{projectId}:
    get:
      description: Returns the specified project
      operationId: getProject
      parameters:
      - description: The ID of the specified Project
        example: f9d633f8-c684-4dc3-b410-d36df912c4c1
        in: path
        name: id
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        required: true
        type: string
        x-go-name: ID
      responses:
        "200":
          $ref: '#/responses/projectResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Projects
    put:
      description: Updates the values of the specified project
      operationId: updateProject
      parameters:
      - description: The ID of the specified Project
        example: f9d633f8-c684-4dc3-b410-d36df912c4c1
        in: path
        name: id
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        required: true
        type: string
        x-go-name: ID
      - description: The new project resource to be created
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/newTagDto'
      responses:
        "204":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Projects
  /project/{projectId}/status:
    put:
      description: Updates the status of the specified project
      operationId: updateProjectStatus
      responses:
        "204":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Projects
  /project/{projectId}/tag:
    delete:
      description: Created and associated the tag with the specified project
      operationId: deleteTag
      parameters:
      - description: The ID of the specified Project
        example: f9d633f8-c684-4dc3-b410-d36df912c4c1
        in: path
        name: id
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        required: true
        type: string
        x-go-name: ID
      responses:
        "204":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Projects
    post:
      description: Created and associated the tag with the specified project
      operationId: createTag
      parameters:
      - description: The ID of the specified Project
        example: f9d633f8-c684-4dc3-b410-d36df912c4c1
        in: path
        name: id
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        required: true
        type: string
        x-go-name: ID
      - description: The tag to be created and associated with the given project
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/newTagDto'
      responses:
        "204":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      tags:
      - Projects
produces:
- application/json
responses:
  accountResponse:
    description: AccountResponse an account representing the organisation, company,
      or group
    headers:
      Body: {}
    schema:
      $ref: '#/definitions/Account'
  errorResponse:
    description: ErrorResponseWrapper a response detailing a user or internal server
      error
    headers:
      Body: {}
    schema:
      $ref: '#/definitions/httpError'
  noContent:
    description: NoContentResponse a response containing no content
  projectInfoResponse:
    description: ProjectInfoResponse a list of project information associated with
      the authenticated account
    schema:
      $ref: '#/definitions/ProjectInfoList'
  projectResponse:
    description: ProjectResponse the specified project
    headers:
      Body: {}
    schema:
      $ref: '#/definitions/Project'
schemes:
- http
security:
- api_key: []
securityDefinitions:
  api_key:
    in: header
    name: KEY
    type: apiKey
  oauth2:
    authorizationUrl: /oauth2/auth
    in: header
    tokenUrl: /oauth2/token
    type: oauth2
swagger: "2.0"
